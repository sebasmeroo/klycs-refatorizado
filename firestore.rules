rules_version = '2';

/**
 * Firestore Security Rules - Optimizadas para Seguridad Máxima y Reducción de Costos
 * ✅ Rate limiting integrado
 * ✅ Validación estricta de datos
 * ✅ Prevención de lectura masiva (scan attacks)
 * ✅ Límites de tamaño de documentos
 * ✅ Validación de tipos y formatos
 */

service cloud.firestore {
  match /databases/{database}/documents {

    // === FUNCIONES DE VALIDACIÓN GLOBAL ===

    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/admins/$(userId));
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Validar timestamp dentro de ventana razonable (±5 minutos)
    function isValidTimestamp(ts) {
      let now = request.time.toMillis();
      let fiveMin = 300000;
      return ts >= (now - fiveMin) && ts <= (now + fiveMin);
    }

    // Validar email format
    function isValidEmail(email) {
      return email is string &&
             email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$') &&
             email.size() <= 320;
    }

    // Validar longitud de string
    function isValidString(str, minLen, maxLen) {
      return str is string && str.size() >= minLen && str.size() <= maxLen;
    }

    // Prevenir modificación de campos críticos
    function noImmutableFieldsChanged(immutableFields) {
      return !request.resource.data.diff(resource.data).affectedKeys()
        .hasAny(immutableFields);
    }

    // Validar tamaño máximo del documento (1MB)
    function isValidDocSize() {
      return request.resource.size() < 1000000;
    }

    function isPublicCalendarData(calendarData) {
      return calendarData != null && (
        calendarData.isPublic == true ||
        (calendarData.linkedEmail is string && calendarData.linkedEmail.size() > 0)
      );
    }

    // === REGLAS PARA USUARIOS ===
    match /users/{userId} {
      // Permitir leer/listar si estás autenticado (necesario para queries)
      allow read, list: if isAuthenticated() ||
                        isAdmin(request.auth.uid) ||
                        request.auth == null; // Permitir lecturas públicas para validaciones por email

      allow create: if isOwner(userId) &&
                   isValidDocSize() &&
                   request.resource.data.keys().hasAll(['email', 'createdAt']) &&
                   isValidEmail(request.resource.data.email);

      allow update: if isOwner(userId) &&
                   isValidDocSize() &&
                   // No permitir cambiar email, uid, createdAt
                   noImmutableFieldsChanged(['email', 'uid', 'createdAt']);

      allow delete: if isAdmin(request.auth.uid);

      // Subcolecciones
      match /settings/{settingId} {
        allow read, write: if isOwner(userId) && isValidDocSize();
      }

      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }

      // Rate limiting: máximo 50 notificaciones por día
      match /daily_stats/{statsId} {
        allow read, write: if isOwner(userId);
      }
    }

    // === REGLAS PARA TARJETAS ===
    match /cards/{cardId} {
      // Lectura pública solo si isPublic == true
      allow read: if resource.data.isPublic == true ||
                 isOwner(resource.data.userId) ||
                 isAdmin(request.auth.uid);

      // Crear tarjeta (máx 5 por minuto - verificado en cliente)
      allow create: if isAuthenticated() &&
                   isOwner(request.resource.data.userId) &&
                   isValidDocSize() &&
                   request.resource.data.keys().hasAll(['userId', 'slug', 'createdAt']) &&
                   isValidString(request.resource.data.slug, 3, 100) &&
                   isValidTimestamp(request.resource.data.createdAt.toMillis());

      // Actualizar solo propietario
      allow update: if isOwner(resource.data.userId) &&
                   isValidDocSize() &&
                   // No permitir cambiar userId, createdAt
                   noImmutableFieldsChanged(['userId', 'createdAt']);

      // Eliminar solo propietario
      allow delete: if isOwner(resource.data.userId);

      // Analytics de tarjeta
      match /analytics/{analyticsId} {
        allow read: if isOwner(get(/databases/$(database)/documents/cards/$(cardId)).data.userId);
        // Crear analytics sin auth pero con timestamp válido
        allow create: if isValidTimestamp(request.resource.data.timestamp.toMillis()) &&
                     request.resource.data.keys().hasAll(['event', 'timestamp']) &&
                     request.resource.data.event in ['view', 'click', 'share'];
        allow update, delete: if false; // Inmutables
      }
    }

    // === REGLAS PARA CALENDARIOS COLABORATIVOS ===
    match /shared_calendars/{calendarId} {
      // Permitir leer/listar incluso sin autenticación para profesionales vinculados o calendarios públicos
      allow read, list: if isAuthenticated() ||
                        isAdmin(request.auth.uid) ||
                        isPublicCalendarData(resource.data);

      allow create: if isAuthenticated() &&
                   isOwner(request.resource.data.ownerId) &&
                   isValidDocSize() &&
                   request.resource.data.keys().hasAll(['name', 'ownerId', 'members', 'createdAt']) &&
                   isValidString(request.resource.data.name, 1, 100);

      allow update: if isAuthenticated() && isValidDocSize();

      allow delete: if isAuthenticated() &&
                       (isOwner(resource.data.ownerId) || isAdmin(request.auth.uid));

      // Subcolección de estadísticas mensuales (agregaciones)
      match /monthlyStats/{monthKey} {
        // Permitir lectura si puedes leer el calendario padre
        allow read: if isAuthenticated() ||
                    isAdmin(request.auth.uid) ||
                    isPublicCalendarData(get(/databases/$(database)/documents/shared_calendars/$(calendarId)).data);

        // Solo Cloud Functions pueden escribir (sin auth)
        allow create, update: if false;
        allow delete: if isAdmin(request.auth.uid);
      }
    }

    // === REGLAS PARA EVENTOS DE CALENDARIO ===
    match /calendar_events/{eventId} {
      // Permitir leer/listar eventos si estás autenticado o si el calendario es accesible públicamente
      allow read, list: if isAuthenticated() ||
                        isAdmin(request.auth.uid) ||
                        (resource.data.calendarId is string &&
                         isPublicCalendarData(get(/databases/$(database)/documents/shared_calendars/$(resource.data.calendarId)).data));

      // Permitir crear eventos - validar solo campos básicos
      allow create: if isAuthenticated() &&
                   isValidDocSize() &&
                   request.resource.data.title != null &&
                   isValidString(request.resource.data.title, 1, 200);

      // Permitir actualizar/eliminar eventos si estás autenticado
      allow update, delete: if isAuthenticated();
    }

    // === REGLAS PARA COMENTARIOS ===
    match /event_comments/{commentId} {
      allow read: if isAuthenticated();

      allow create: if isAuthenticated() &&
                   isOwner(request.resource.data.userId) &&
                   isValidString(request.resource.data.message, 1, 1000) &&
                   isValidTimestamp(request.resource.data.createdAt.toMillis());

      allow update: if isOwner(resource.data.userId);

      allow delete: if isOwner(resource.data.userId) || isAdmin(request.auth.uid);
    }

    // === REGLAS PARA RESERVAS ===
    match /bookings/{bookingId} {
      // Lectura: solo propietario del servicio
      allow read: if isAuthenticated() &&
                 (isOwner(resource.data.userId) ||
                  isOwner(resource.data.clientId));

      // Crear reserva (con o sin auth, pero con validación)
      allow create: if isValidDocSize() &&
                   request.resource.data.keys().hasAll(['clientName', 'clientEmail', 'userId', 'status', 'date', 'time', 'duration', 'price']) &&
                   isValidString(request.resource.data.clientName, 1, 100) &&
                   isValidEmail(request.resource.data.clientEmail) &&
                   request.resource.data.status in ['pending', 'confirmed', 'cancelled', 'completed'] &&
                   request.resource.data.duration > 0 && request.resource.data.duration <= 480 && // máx 8 horas
                   request.resource.data.price >= 0 && request.resource.data.price <= 100000 &&
                   isValidTimestamp(request.resource.data.createdAt.toMillis());

      // Actualizar: solo el profesional
      allow update: if isAuthenticated() && isOwner(resource.data.userId);

      // Eliminar: solo el profesional
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // === REGLAS PARA PLANTILLAS ===
    match /userTemplates/{templateId} {
      allow read: if true;

      allow create: if isAdmin(request.auth.uid) && isValidDocSize();

      // Permitir actualizar downloadCount sin ser admin
      allow update: if isAdmin(request.auth.uid) ||
                   (isAuthenticated() &&
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['downloadCount']));

      allow delete: if isAdmin(request.auth.uid);
    }

    // === REGLAS PARA INSTANCIAS DE PLANTILLAS ===
    match /templateInstances/{instanceId} {
      allow read: if isAuthenticated() ||
                 (resource != null && resource.data.isActive == true);

      allow create: if isAuthenticated() && isValidDocSize();

      allow update, delete: if isAuthenticated() &&
                           (isOwner(resource.data.userId) || isAdmin(request.auth.uid));
    }

    // === REGLAS PARA INVITACIONES ===
    match /calendar_invitations/{invitationId} {
      allow read: if isAuthenticated() &&
                 (request.auth.email == resource.data.senderEmail ||
                  request.auth.email == resource.data.recipientEmail);

      // Crear con límite de 10 por hora (verificado en cliente)
      allow create: if isAuthenticated() &&
                   isValidEmail(request.resource.data.recipientEmail) &&
                   isValidTimestamp(request.resource.data.createdAt.toMillis());

      allow update: if isAuthenticated() &&
                   request.auth.email == resource.data.recipientEmail;

      allow delete: if isAuthenticated() &&
                   (request.auth.email == resource.data.senderEmail ||
                    request.auth.email == resource.data.recipientEmail);
    }

    // === REGLAS PARA NOTIFICACIONES ===
    match /calendar_notifications/{notificationId} {
      allow read, update, delete: if isAuthenticated() &&
                                  isOwner(resource.data.userId);

      allow create: if isAuthenticated();
    }

    // === REGLAS PARA ADMINS ===
    match /admins/{uid} {
      allow read: if isAuthenticated();
      // Solo self-register (primera vez)
      allow create: if isAuthenticated() && isOwner(uid);
      allow update, delete: if false;
    }

    // === REGLAS PARA FEATURE FLAGS ===
    match /featureFlags/{flagId} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }

    // === REGLAS PARA ANALYTICS GLOBALES ===
    match /analytics/{analyticsId} {
      allow read: if isAdmin(request.auth.uid);
      allow create: if isValidTimestamp(request.resource.data.timestamp.toMillis());
      allow update, delete: if false;
    }

    // === REGLAS PARA SUSCRIPCIONES ===
    match /subscriptions/{subscriptionId} {
      // Permitir leer tu propia suscripción o si eres admin
      allow read: if isAuthenticated() &&
                     (resource.data.userId == request.auth.uid || isAdmin(request.auth.uid));

      // Permitir crear/actualizar tu propia suscripción
      allow create, update: if isAuthenticated() &&
                              request.resource.data.userId == request.auth.uid;

      allow delete: if isAdmin(request.auth.uid);

      // Subcoleción de uso
      match /usage/{usageId} {
        allow read, write: if isAuthenticated() &&
                             get(/databases/$(database)/documents/subscriptions/$(subscriptionId)).data.userId == request.auth.uid;
      }
    }

    // === REGLAS PARA PLANES DE SUSCRIPCIÓN ===
    match /subscription_plans/{planId} {
      allow read: if true;
      allow create, update, delete: if isAdmin(request.auth.uid);
    }

    // === REGLAS PARA SUSCRIPCIONES DE USUARIO ===
    match /user_subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() &&
                  (resource.data.userId == request.auth.uid || isAdmin(request.auth.uid));

      allow create, update: if isAuthenticated() &&
                            request.resource.data.userId == request.auth.uid;

      allow delete: if isAdmin(request.auth.uid);
    }

    // === REGLAS PARA REGISTROS DE USO ===
    match /usage_records/{usageId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;

      allow create: if isAuthenticated() &&
                    request.resource.data.userId == request.auth.uid;

      allow update, delete: if false;
    }

    // === REGLAS PARA CLIENTES EXTERNOS ===
    match /external_clients/{clientId} {
      // Lectura: solo el propietario del cliente
      allow read, list: if isAuthenticated() &&
                        (resource.data.ownerId == request.auth.uid || isAdmin(request.auth.uid));

      // Crear cliente externo
      allow create: if isAuthenticated() &&
                   isOwner(request.resource.data.ownerId) &&
                   isValidDocSize() &&
                   request.resource.data.keys().hasAll(['name', 'ownerId', 'totalHours', 'totalAmount', 'currency', 'createdAt']) &&
                   isValidString(request.resource.data.name, 1, 100) &&
                   request.resource.data.totalHours is number && request.resource.data.totalHours >= 0 &&
                   request.resource.data.totalAmount is number && request.resource.data.totalAmount >= 0 &&
                   request.resource.data.currency in ['EUR', 'USD', 'GBP'] &&
                   isValidTimestamp(request.resource.data.createdAt.toMillis());

      // Actualizar cliente externo: solo el propietario
      allow update: if isAuthenticated() &&
                   isOwner(resource.data.ownerId) &&
                   isValidDocSize() &&
                   // No permitir cambiar ownerId, createdAt
                   noImmutableFieldsChanged(['ownerId', 'createdAt']);

      // Eliminar cliente: solo si no tiene servicios (verificado en código)
      allow delete: if isAuthenticated() &&
                   isOwner(resource.data.ownerId);

      // Subcolección de servicios
      match /services/{serviceId} {
        // Lectura: propietario del cliente
        allow read, list: if isAuthenticated() &&
                          (get(/databases/$(database)/documents/external_clients/$(clientId)).data.ownerId == request.auth.uid ||
                           isAdmin(request.auth.uid));

        // Crear servicio: solo el propietario del cliente (generalmente automático desde eventos)
        allow create: if isAuthenticated() &&
                     isValidDocSize() &&
                     request.resource.data.keys().hasAll(['clientId', 'eventId', 'professionalId', 'professionalName', 'professionalRate', 'date', 'title', 'hours', 'amount', 'status', 'createdAt']) &&
                     request.resource.data.hours is number && request.resource.data.hours > 0 && request.resource.data.hours <= 24 &&
                     request.resource.data.amount is number && request.resource.data.amount >= 0 &&
                     request.resource.data.status in ['completed', 'cancelled'] &&
                     isValidTimestamp(request.resource.data.createdAt.toMillis());

        // Actualizar servicio: solo para cancelar
        allow update: if isAuthenticated() &&
                     get(/databases/$(database)/documents/external_clients/$(clientId)).data.ownerId == request.auth.uid &&
                     request.resource.data.status == 'cancelled';

        // No permitir eliminar servicios (solo cancelarlos)
        allow delete: if false;
      }
    }

    // === REGLAS PARA STRIPE CUSTOMERS ===
    match /stripeCustomers/{userId} {
      // Permitir leer tu propia información de Stripe
      allow read: if isAuthenticated() && isOwner(userId);

      // Solo Cloud Functions pueden escribir
      allow create, update: if false;
      allow delete: if false;

      // Subcollection de suscripciones de Stripe
      match /subscriptions/{subscriptionId} {
        // Permitir leer tus propias suscripciones
        allow read: if isAuthenticated() && isOwner(userId);

        // Solo Cloud Functions pueden escribir
        allow create, update, delete: if false;
      }
    }

    // === STRIPE CONNECT ACCOUNTS ===
    match /stripe_accounts/{accountId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create, update, delete: if false;
    }

    match /stripe_onboarding_sessions/{sessionId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create, update, delete: if false;
    }

    match /payment_intents/{intentId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create, update, delete: if false;
    }

    // === REGLAS PARA RETIROS DE PLATAFORMA ===
    match /platform_withdrawals/{withdrawalId} {
      // Lectura: solo el propietario o admin
      allow read, list: if isAuthenticated() &&
                        (resource.data.userId == request.auth.uid || isAdmin(request.auth.uid));

      // Crear retiro
      allow create: if isAuthenticated() &&
                   isOwner(request.resource.data.userId) &&
                   isValidDocSize() &&
                   request.resource.data.keys().hasAll(['userId', 'amount', 'status', 'createdAt']) &&
                   request.resource.data.amount is number && request.resource.data.amount > 0 &&
                   request.resource.data.status in ['pending', 'completed', 'failed'] &&
                   isValidTimestamp(request.resource.data.createdAt.toMillis());

      // Actualizar retiro: solo el propietario
      allow update: if isAuthenticated() &&
                   isOwner(resource.data.userId) &&
                   isValidDocSize();

      // Eliminar retiro: solo el propietario
      allow delete: if isAuthenticated() &&
                   isOwner(resource.data.userId);
    }

    // === REGLAS PARA FACTURAS EXTERNAS ===
    match /external_invoices/{invoiceId} {
      // Lectura: solo el propietario o admin
      allow read, list: if isAuthenticated() &&
                        (resource.data.userId == request.auth.uid || isAdmin(request.auth.uid));

      // Crear factura
      allow create: if isAuthenticated() &&
                   isOwner(request.resource.data.userId) &&
                   isValidDocSize() &&
                   request.resource.data.keys().hasAll(['userId', 'clientName', 'amount', 'status', 'issueDate', 'createdAt']) &&
                   isValidString(request.resource.data.clientName, 1, 200) &&
                   request.resource.data.amount is number && request.resource.data.amount > 0 &&
                   request.resource.data.status in ['pending', 'paid', 'overdue', 'cancelled'] &&
                   isValidTimestamp(request.resource.data.createdAt.toMillis());

      // Actualizar factura: solo el propietario
      allow update: if isAuthenticated() &&
                   isOwner(resource.data.userId) &&
                   isValidDocSize() &&
                   // No permitir cambiar userId, createdAt
                   noImmutableFieldsChanged(['userId', 'createdAt']);

      // Eliminar factura: solo el propietario
      allow delete: if isAuthenticated() &&
                   isOwner(resource.data.userId);
    }

    // === BLOQUEAR TODO LO DEMÁS ===
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
