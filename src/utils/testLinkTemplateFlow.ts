import { userTemplatesService } from '@/services/userTemplates';
import { secureLogger } from '@/utils/secureLogger';

// Script para probar el flujo completo de aplicaci√≥n de plantillas a enlaces individuales
export async function testLinkTemplateFlow(cardId: string, linkId: string): Promise<boolean> {
  try {
    secureLogger.devOnly('üöÄ INICIANDO PRUEBA COMPLETA DE PLANTILLAS INDIVIDUALES');
    secureLogger.devOnly('================================================');
    secureLogger.devOnly(`üìã Card ID: ${cardId}`);
    secureLogger.devOnly(`üîó Link ID: ${linkId}`);
    secureLogger.devOnly('');
    
    // Paso 1: Verificar estado inicial
    secureLogger.devOnly('üìä PASO 1: Verificando estado inicial...');
    const initialTemplate = await userTemplatesService.getActiveTemplateForCard(cardId, 'links', linkId);
    secureLogger.devOnly(`   Estado inicial: ${initialTemplate ? '‚ùå Ya tiene plantilla' : '‚úÖ Sin plantilla (correcto)'}`);
    
    // Paso 2: Obtener plantillas disponibles
    secureLogger.devOnly('');
    secureLogger.devOnly('üìä PASO 2: Obteniendo plantillas disponibles...');
    const availableTemplates = await userTemplatesService.getTemplatesBySection('links');
    secureLogger.devOnly(`   Plantillas encontradas: ${availableTemplates.length}`);
    
    if (availableTemplates.length === 0) {
      secureLogger.devOnly('‚ùå No hay plantillas disponibles para probar');
      return false;
    }
    
    const testTemplate = availableTemplates[0];
    secureLogger.devOnly(`   Usando plantilla: "${testTemplate.name}"`);
    
    // Paso 3: Aplicar plantilla
    secureLogger.devOnly('');
    secureLogger.devOnly('üìä PASO 3: Aplicando plantilla...');
    const testData = {
      title: `Enlace Personalizado ${Date.now()}`,
      backgroundColor: '#ff6b6b',
      textColor: '#ffffff'
    };
    
    const instance = await userTemplatesService.applyTemplateToCard(
      testTemplate.id,
      'test-user',
      cardId,
      testData,
      { targetItemId: linkId }
    );
    
    if (!instance) {
      secureLogger.devOnly('‚ùå Error aplicando plantilla');
      return false;
    }
    
    secureLogger.devOnly('‚úÖ Plantilla aplicada exitosamente');
    secureLogger.devOnly(`   Instance ID: ${instance.id}`);
    secureLogger.devOnly(`   Target Item: ${instance.targetItemId}`);
    
    // Paso 4: Verificar aplicaci√≥n
    secureLogger.devOnly('');
    secureLogger.devOnly('üìä PASO 4: Verificando aplicaci√≥n...');
    
    // Verificar que la plantilla est√° aplicada al enlace espec√≠fico
    const appliedTemplate = await userTemplatesService.getActiveTemplateForCard(cardId, 'links', linkId);
    const generalTemplate = await userTemplatesService.getActiveTemplateForCard(cardId, 'links');
    
    secureLogger.devOnly(`   Plantilla espec√≠fica: ${appliedTemplate ? '‚úÖ ENCONTRADA' : '‚ùå NO ENCONTRADA'}`);
    secureLogger.devOnly(`   Plantilla general: ${generalTemplate ? '‚ùå PRESENTE (mal)' : '‚úÖ AUSENTE (bien)'}`);
    
    if (appliedTemplate) {
      secureLogger.devOnly(`   ‚úì Plantilla: ${appliedTemplate.template.name}`);
      secureLogger.devOnly(`   ‚úì Target: ${appliedTemplate.instance.targetItemId}`);
      secureLogger.devOnly(`   ‚úì Datos: ${JSON.stringify(appliedTemplate.instance.data)}`);
    }
    
    // Paso 5: Simular datos del preview
    secureLogger.devOnly('');
    secureLogger.devOnly('üìä PASO 5: Simulando datos del preview...');
    
    if (appliedTemplate) {
      // Simular los datos que deber√≠a recibir la plantilla
      const mockLinkData = {
        id: linkId,
        title: 'T√≠tulo del Enlace de Prueba',
        url: 'https://ejemplo.com',
        description: 'Descripci√≥n del enlace',
        icon: 'üîó',
        iconType: 'emoji'
      };
      
      const expectedData = {
        // Datos del enlace espec√≠fico
        currentLink: mockLinkData,
        linkTitle: mockLinkData.title,
        linkUrl: mockLinkData.url,
        linkDescription: mockLinkData.description,
        linkIcon: mockLinkData.icon,
        linkIconType: mockLinkData.iconType,
        
        // Datos de la instancia
        ...appliedTemplate.instance.data
      };
      
      secureLogger.devOnly('   üìã Datos que deber√≠a recibir la plantilla:');
      secureLogger.devOnly(`   ‚úì linkTitle: "${expectedData.linkTitle}"`);
      secureLogger.devOnly(`   ‚úì linkUrl: "${expectedData.linkUrl}"`);
      secureLogger.devOnly(`   ‚úì linkIcon: "${expectedData.linkIcon}"`);
      secureLogger.devOnly(`   ‚úì backgroundColor: "${expectedData.backgroundColor}"`);
      secureLogger.devOnly(`   ‚úì textColor: "${expectedData.textColor}"`);
    }
    
    // Paso 6: Instrucciones para verificar en UI
    secureLogger.devOnly('');
    secureLogger.devOnly('üìä PASO 6: Verificaci√≥n manual en UI...');
    secureLogger.devOnly('   üëÄ AHORA VERIFICA EN LA INTERFAZ:');
    secureLogger.devOnly(`   1. Ve al preview de la tarjeta`);
    secureLogger.devOnly(`   2. Busca el enlace con ID: ${linkId}`);
    secureLogger.devOnly(`   3. Deber√≠a verse con la plantilla aplicada`);
    secureLogger.devOnly(`   4. Otros enlaces deber√≠an verse normales`);
    secureLogger.devOnly('');
    secureLogger.devOnly('   üîç EN LA CONSOLA DEBER√çAS VER:');
    secureLogger.devOnly('   - "üîç SectionRenderer - links/[linkId]: HAS TEMPLATE"');
    secureLogger.devOnly('   - "üé® TemplatePreview - links/[linkId]: [datos]"');
    secureLogger.devOnly('');
    
    // Paso 7: Limpiar
    secureLogger.devOnly('üìä PASO 7: Limpiando plantilla de prueba...');
    await userTemplatesService.removeTemplateFromCard(cardId, 'links', linkId);
    secureLogger.devOnly('‚úÖ Plantilla removida');
    
    const success = !!appliedTemplate && !generalTemplate;
    
    secureLogger.devOnly('');
    secureLogger.devOnly('üéØ RESULTADO FINAL:');
    if (success) {
      secureLogger.devOnly('‚úÖ PRUEBA EXITOSA - El sistema funciona correctamente');
      secureLogger.devOnly('   Si no ves cambios en el preview, el problema est√° en:');
      secureLogger.devOnly('   1. El c√≥digo de la plantilla del admin');
      secureLogger.devOnly('   2. Los datos que est√° usando la plantilla');
      secureLogger.devOnly('   3. El re-rendering del componente');
    } else {
      secureLogger.devOnly('‚ùå PRUEBA FALLIDA - Hay problemas en el sistema');
    }
    
    return success;
    
  } catch (error) {
    secureLogger.devOnly('üí• ERROR EN LA PRUEBA:', error);
    return false;
  }
}

// Funci√≥n para monitorear en tiempo real los cambios de plantillas
export function startTemplateMonitoring(cardId: string, linkIds: string[]): () => void {
  secureLogger.devOnly('üëÄ INICIANDO MONITOREO DE PLANTILLAS EN TIEMPO REAL');
  secureLogger.devOnly('===================================================');
  
  const unsubscribeFunctions: (() => void)[] = [];
  
  // Monitorear cada enlace espec√≠fico
  linkIds.forEach(linkId => {
    const unsubscribe = userTemplatesService.subscribeActiveTemplateForCard(
      cardId,
      'links',
      (data) => {
        const timestamp = new Date().toLocaleTimeString();
        if (data) {
          secureLogger.devOnly(`[${timestamp}] üîó Link ${linkId}: PLANTILLA APLICADA - ${data.template.name}`);
        } else {
          secureLogger.devOnly(`[${timestamp}] üîó Link ${linkId}: SIN PLANTILLA`);
        }
      },
      { targetItemId: linkId }
    );
    unsubscribeFunctions.push(unsubscribe);
  });
  
  // Monitorear plantillas generales
  const unsubscribeGeneral = userTemplatesService.subscribeActiveTemplateForCard(
    cardId,
    'links',
    (data) => {
      const timestamp = new Date().toLocaleTimeString();
      if (data) {
        secureLogger.devOnly(`[${timestamp}] üìã GENERAL: PLANTILLA APLICADA - ${data.template.name}`);
      } else {
        secureLogger.devOnly(`[${timestamp}] üìã GENERAL: SIN PLANTILLA`);
      }
    }
  );
  unsubscribeFunctions.push(unsubscribeGeneral);
  
  return () => {
    secureLogger.devOnly('üõë Deteniendo monitoreo de plantillas');
    unsubscribeFunctions.forEach(fn => fn());
  };
}

// A√±adir funciones al objeto global
if (typeof window !== 'undefined') {
  // @ts-ignore
  window.testLinkTemplateFlow = testLinkTemplateFlow;
  // @ts-ignore
  window.startTemplateMonitoring = startTemplateMonitoring;
  
  secureLogger.devOnly('üõ†Ô∏è Funciones de prueba de flujo disponibles:');
  secureLogger.devOnly('  - testLinkTemplateFlow(cardId, linkId) - Prueba completa');
  secureLogger.devOnly('  - startTemplateMonitoring(cardId, [linkIds]) - Monitoreo en tiempo real');
}
